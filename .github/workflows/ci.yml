name: CI

on:
  push:
    branches: [main]
  pull_request:

jobs:
  backend:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      POETRY_VERSION: 1.7.1
      POETRY_VIRTUALENVS_IN_PROJECT: "true"
      DB_URL: sqlite+aiosqlite:///./ci.db
      JWT_SECRET: ci-secret
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRES_MIN: "15"
      REFRESH_TOKEN_EXPIRES_DAYS: "7"
      ENV: test
      BREVO_API_KEY: test-brevo-key
      BREVO_SMTP_SERVER: smtp.test.local
      BREVO_PORT: "587"
      BREVO_SENDER_EMAIL: alerts@example.com
      BREVO_SENDER_NAME: CI Alerts
      ADMIN_NOTIFICATION_EMAIL: admin@example.com
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          installer-parallel: true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: backend/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        working-directory: backend
        run: poetry install --no-interaction --no-root --with dev

      - name: Format (check)
        working-directory: backend
        run: make fmt

      - name: Lint
        working-directory: backend
        run: make lint

      - name: Run migrations
        working-directory: backend
        run: make migrate

      - name: Run tests
        working-directory: backend
        run: make test

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/htmlcov
